// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

model Tag {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String       @unique
  parentId    Int?
  parent      Tag?         @relation("Parent", fields: [parentId], references: [id])
  children    Tag[]        @relation("Parent")
  attractions Attraction[] 
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  email String @unique
  banned Boolean
  groups Group[] @relation("GroupMembers")
}

model Group {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String @db.VarChar(255)
  members User[] @relation("GroupMembers")
}

model TimeRange {
  id Int @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime
  schedule Schedule @relation("Times", fields: [scheduleId], references: [id])
  scheduleId Int
}

model Schedule {
  id          Int      @id @default(autoincrement())
  times TimeRange[] @relation("Times")
  event       Attraction? @relation("EventSchedule")
}

model Attraction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @db.VarChar(255)
  address String @db.VarChar(255) // human readable???
  description String? 
  schedule    Schedule @relation("EventSchedule", fields: [timeId], references: [id])
  timeId      Int 
  presenceId  String?  @unique
  tags        Tag[]    
  author      String
  group       String
}

//model Event {
//  id          Int      @id @default(autoincrement())
//  createdAt   DateTime @default(now())
//  updatedAt   DateTime @updatedAt
//  title       String   @db.VarChar(255)
//  description String?
//  author      User     @relation(fields: [authorId], references: [id])
//  authorId    Int
//}
//
//model User {
//  id     Int     @id @default(autoincrement())
//  email  String  @unique
//  name   String?
//  events Event[]
//}
